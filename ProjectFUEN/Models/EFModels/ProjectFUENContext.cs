// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ProjectFUEN.Models.EFModels
{
    public partial class ProjectFUENContext : DbContext
    {
        public ProjectFUENContext()
        {
        }

        public ProjectFUENContext(DbContextOptions<ProjectFUENContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<CommentReport> CommentReports { get; set; }
        public virtual DbSet<IndiscriminateReport> IndiscriminateReports { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Photo> Photos { get; set; }
        public virtual DbSet<PhotoReport> PhotoReports { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.CommentTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("FK__Comments__Member__49C3F6B7");

                entity.HasOne(d => d.Photo)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.PhotoId)
                    .HasConstraintName("FK__Comments__PhotoI__4AB81AF0");
            });

            modelBuilder.Entity<CommentReport>(entity =>
            {
                entity.Property(e => e.ReportTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.CommentReports)
                    .HasForeignKey(d => d.CommentId)
                    .HasConstraintName("FK__CommentRe__Comme__4F7CD00D");

                entity.HasOne(d => d.ReporterNavigation)
                    .WithMany(p => p.CommentReports)
                    .HasForeignKey(d => d.Reporter)
                    .HasConstraintName("FK__CommentRe__Repor__4E88ABD4");
            });

            modelBuilder.Entity<IndiscriminateReport>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("PK__Indiscri__0CF04B18220BF373");

                entity.Property(e => e.MemberId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasIndex(e => e.EmailAccount, "UQ__Members__005407CD44BB6AB3")
                    .IsUnique();

                entity.Property(e => e.About).HasMaxLength(500);

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.BirthOfDate).HasColumnType("date");

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EmailAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NickName).HasMaxLength(50);

                entity.Property(e => e.PhotoSticker)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RealName).HasMaxLength(50);
            });

            modelBuilder.Entity<Photo>(entity =>
            {
                entity.Property(e => e.Aperture)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Camera)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Location)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Negative)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Pixel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShootingTime).HasColumnType("datetime");

                entity.Property(e => e.Shutter)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UploadTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.AuthorNavigation)
                    .WithMany(p => p.Photos)
                    .HasForeignKey(d => d.Author)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Photos__Author__45F365D3");
            });

            modelBuilder.Entity<PhotoReport>(entity =>
            {
                entity.Property(e => e.ReportTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Photo)
                    .WithMany(p => p.PhotoReports)
                    .HasForeignKey(d => d.PhotoId)
                    .HasConstraintName("FK__PhotoRepo__Photo__5441852A");

                entity.HasOne(d => d.ReporterNavigation)
                    .WithMany(p => p.PhotoReports)
                    .HasForeignKey(d => d.Reporter)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK__PhotoRepo__Repor__534D60F1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}